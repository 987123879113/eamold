// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: score.sql

package db

import (
	"context"
	"strings"
)

const addRankedScore = `-- name: AddRankedScore :exec
INSERT INTO gf8dm7_ranked_scores
(game_type, musicid, seq, score, flags, name)
VALUES
(?,?,?,?,?,?)
`

type AddRankedScoreParams struct {
	GameType int64
	Musicid  int64
	Seq      int64
	Score    int64
	Flags    int64
	Name     string
}

func (q *Queries) AddRankedScore(ctx context.Context, arg AddRankedScoreParams) error {
	_, err := q.db.ExecContext(ctx, addRankedScore,
		arg.GameType,
		arg.Musicid,
		arg.Seq,
		arg.Score,
		arg.Flags,
		arg.Name,
	)
	return err
}

const addScore = `-- name: AddScore :exec
INSERT INTO gf8dm7_scores
(game_type, musicid, seq, score)
VALUES
(?,?,?,?)
`

type AddScoreParams struct {
	GameType int64
	Musicid  int64
	Seq      int64
	Score    int64
}

func (q *Queries) AddScore(ctx context.Context, arg AddScoreParams) error {
	_, err := q.db.ExecContext(ctx, addScore,
		arg.GameType,
		arg.Musicid,
		arg.Seq,
		arg.Score,
	)
	return err
}

const getScoreRank = `-- name: GetScoreRank :one
SELECT COUNT(*) AS count
FROM gf8dm7_scores
WHERE musicid = ?
AND game_type = ?
AND seq = ?
AND score >= ?
`

type GetScoreRankParams struct {
	Musicid  int64
	GameType int64
	Seq      int64
	Score    int64
}

func (q *Queries) GetScoreRank(ctx context.Context, arg GetScoreRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getScoreRank,
		arg.Musicid,
		arg.GameType,
		arg.Seq,
		arg.Score,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalRankedScoreCounts = `-- name: GetTotalRankedScoreCounts :many
SELECT musicid, COUNT(*) AS count
FROM gf8dm7_scores
WHERE musicid IN (/*SLICE:musicids*/?)
AND game_type = ?
GROUP BY musicid
`

type GetTotalRankedScoreCountsParams struct {
	Musicids []int64
	GameType int64
}

type GetTotalRankedScoreCountsRow struct {
	Musicid int64
	Count   int64
}

func (q *Queries) GetTotalRankedScoreCounts(ctx context.Context, arg GetTotalRankedScoreCountsParams) ([]GetTotalRankedScoreCountsRow, error) {
	query := getTotalRankedScoreCounts
	var queryParams []interface{}
	if len(arg.Musicids) > 0 {
		for _, v := range arg.Musicids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:musicids*/?", strings.Repeat(",?", len(arg.Musicids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:musicids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.GameType)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalRankedScoreCountsRow
	for rows.Next() {
		var i GetTotalRankedScoreCountsRow
		if err := rows.Scan(&i.Musicid, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
