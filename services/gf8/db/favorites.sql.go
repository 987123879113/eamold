// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: favorites.sql

package db

import (
	"context"
)

const getFavorites = `-- name: GetFavorites :many
SELECT musicid
FROM gf8dm7_favorites
WHERE game_type = ?
ORDER BY count DESC
LIMIT ?
`

type GetFavoritesParams struct {
	GameType int64
	Limit    int64
}

func (q *Queries) GetFavorites(ctx context.Context, arg GetFavoritesParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFavorites, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var musicid int64
		if err := rows.Scan(&musicid); err != nil {
			return nil, err
		}
		items = append(items, musicid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFavoriteCount = `-- name: UpdateFavoriteCount :exec
INSERT INTO gf8dm7_favorites (game_type, musicid, count)
VALUES (?, ?, 1)
ON CONFLICT(game_type, musicid) DO
UPDATE SET count = count + 1
`

type UpdateFavoriteCountParams struct {
	GameType int64
	Musicid  int64
}

func (q *Queries) UpdateFavoriteCount(ctx context.Context, arg UpdateFavoriteCountParams) error {
	_, err := q.db.ExecContext(ctx, updateFavoriteCount, arg.GameType, arg.Musicid)
	return err
}
