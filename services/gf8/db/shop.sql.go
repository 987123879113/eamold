// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shop.sql

package db

import (
	"context"
)

const getRankedShops = `-- name: GetRankedShops :many
SELECT name, points, pref
FROM gf8dm7_shops
WHERE game_type = ?
ORDER BY points DESC
LIMIT ?
`

type GetRankedShopsParams struct {
	GameType int64
	Limit    int64
}

type GetRankedShopsRow struct {
	Name   string
	Points int64
	Pref   int64
}

func (q *Queries) GetRankedShops(ctx context.Context, arg GetRankedShopsParams) ([]GetRankedShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRankedShops, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRankedShopsRow
	for rows.Next() {
		var i GetRankedShopsRow
		if err := rows.Scan(&i.Name, &i.Points, &i.Pref); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRankedShopsByPref = `-- name: GetRankedShopsByPref :many
SELECT name, points
FROM gf8dm7_shops
WHERE pref = ?
AND game_type = ?
ORDER BY points DESC
LIMIT ?
`

type GetRankedShopsByPrefParams struct {
	Pref     int64
	GameType int64
	Limit    int64
}

type GetRankedShopsByPrefRow struct {
	Name   string
	Points int64
}

func (q *Queries) GetRankedShopsByPref(ctx context.Context, arg GetRankedShopsByPrefParams) ([]GetRankedShopsByPrefRow, error) {
	rows, err := q.db.QueryContext(ctx, getRankedShopsByPref, arg.Pref, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRankedShopsByPrefRow
	for rows.Next() {
		var i GetRankedShopsByPrefRow
		if err := rows.Scan(&i.Name, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShopPoints = `-- name: UpdateShopPoints :exec
INSERT INTO gf8dm7_shops (game_type, pref, name, points)
VALUES (?1, ?2, ?3, ?4)
ON CONFLICT(game_type, pref, name) DO
UPDATE SET points = points + ?4
`

type UpdateShopPointsParams struct {
	GameType int64
	Pref     int64
	Name     string
	Points   int64
}

func (q *Queries) UpdateShopPoints(ctx context.Context, arg UpdateShopPointsParams) error {
	_, err := q.db.ExecContext(ctx, updateShopPoints,
		arg.GameType,
		arg.Pref,
		arg.Name,
		arg.Points,
	)
	return err
}
