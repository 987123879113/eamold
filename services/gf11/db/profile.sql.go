// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: profile.sql

package db

import (
	"context"
)

const createCardProfile = `-- name: CreateCardProfile :one
INSERT INTO gf11dm10_card_profile (game_type, gdid, cardid, irid, name, pass, type, update_flag, puzzle_no, recovery)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING game_type, gdid, cardid, irid, name, pass, type, update_flag, puzzle_no, recovery, skill, expired
`

type CreateCardProfileParams struct {
	GameType   int64
	Gdid       int64
	Cardid     string
	Irid       string
	Name       string
	Pass       string
	Type       int64
	UpdateFlag int64
	PuzzleNo   int64
	Recovery   int64
}

func (q *Queries) CreateCardProfile(ctx context.Context, arg CreateCardProfileParams) (Gf11dm10CardProfile, error) {
	row := q.db.QueryRowContext(ctx, createCardProfile,
		arg.GameType,
		arg.Gdid,
		arg.Cardid,
		arg.Irid,
		arg.Name,
		arg.Pass,
		arg.Type,
		arg.UpdateFlag,
		arg.PuzzleNo,
		arg.Recovery,
	)
	var i Gf11dm10CardProfile
	err := row.Scan(
		&i.GameType,
		&i.Gdid,
		&i.Cardid,
		&i.Irid,
		&i.Name,
		&i.Pass,
		&i.Type,
		&i.UpdateFlag,
		&i.PuzzleNo,
		&i.Recovery,
		&i.Skill,
		&i.Expired,
	)
	return i, err
}

const getProfileByCardId = `-- name: GetProfileByCardId :one
SELECT game_type, gdid, cardid, irid, name, pass, type, update_flag, puzzle_no, recovery, skill, expired
FROM gf11dm10_card_profile
WHERE cardid = ?
AND game_type = ?
`

type GetProfileByCardIdParams struct {
	Cardid   string
	GameType int64
}

func (q *Queries) GetProfileByCardId(ctx context.Context, arg GetProfileByCardIdParams) (Gf11dm10CardProfile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByCardId, arg.Cardid, arg.GameType)
	var i Gf11dm10CardProfile
	err := row.Scan(
		&i.GameType,
		&i.Gdid,
		&i.Cardid,
		&i.Irid,
		&i.Name,
		&i.Pass,
		&i.Type,
		&i.UpdateFlag,
		&i.PuzzleNo,
		&i.Recovery,
		&i.Skill,
		&i.Expired,
	)
	return i, err
}

const getProfileByGdId = `-- name: GetProfileByGdId :one
SELECT game_type, gdid, cardid, irid, name, pass, type, update_flag, puzzle_no, recovery, skill, expired
FROM gf11dm10_card_profile
WHERE gdid = ?
AND game_type = ?
`

type GetProfileByGdIdParams struct {
	Gdid     int64
	GameType int64
}

func (q *Queries) GetProfileByGdId(ctx context.Context, arg GetProfileByGdIdParams) (Gf11dm10CardProfile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByGdId, arg.Gdid, arg.GameType)
	var i Gf11dm10CardProfile
	err := row.Scan(
		&i.GameType,
		&i.Gdid,
		&i.Cardid,
		&i.Irid,
		&i.Name,
		&i.Pass,
		&i.Type,
		&i.UpdateFlag,
		&i.PuzzleNo,
		&i.Recovery,
		&i.Skill,
		&i.Expired,
	)
	return i, err
}

const getPuzzleByNumber = `-- name: GetPuzzleByNumber :one
SELECT game_type, gdid, puzzle_no, flags, hidden
FROM gf11dm10_puzzle
WHERE gdid = ?
AND game_type = ?
AND puzzle_no = ?
`

type GetPuzzleByNumberParams struct {
	Gdid     int64
	GameType int64
	PuzzleNo int64
}

func (q *Queries) GetPuzzleByNumber(ctx context.Context, arg GetPuzzleByNumberParams) (Gf11dm10Puzzle, error) {
	row := q.db.QueryRowContext(ctx, getPuzzleByNumber, arg.Gdid, arg.GameType, arg.PuzzleNo)
	var i Gf11dm10Puzzle
	err := row.Scan(
		&i.GameType,
		&i.Gdid,
		&i.PuzzleNo,
		&i.Flags,
		&i.Hidden,
	)
	return i, err
}

const getRecentPuzzle = `-- name: GetRecentPuzzle :one
SELECT gp.game_type, gp.gdid, gp.puzzle_no, gp.flags, gp.hidden
FROM gf11dm10_puzzle AS gp
INNER JOIN gf11dm10_card_profile AS gcp ON (gp.game_type = gcp.game_type AND gp.gdid = gcp.gdid)
WHERE gp.gdid = ?
AND gp.game_type = ?
AND gp.puzzle_no = gcp.puzzle_no
`

type GetRecentPuzzleParams struct {
	Gdid     int64
	GameType int64
}

func (q *Queries) GetRecentPuzzle(ctx context.Context, arg GetRecentPuzzleParams) (Gf11dm10Puzzle, error) {
	row := q.db.QueryRowContext(ctx, getRecentPuzzle, arg.Gdid, arg.GameType)
	var i Gf11dm10Puzzle
	err := row.Scan(
		&i.GameType,
		&i.Gdid,
		&i.PuzzleNo,
		&i.Flags,
		&i.Hidden,
	)
	return i, err
}

const updateRecoveryCount = `-- name: UpdateRecoveryCount :exec
UPDATE gf11dm10_card_profile
SET recovery = ?
WHERE gdid = ?
AND game_type = ?
`

type UpdateRecoveryCountParams struct {
	Recovery int64
	Gdid     int64
	GameType int64
}

func (q *Queries) UpdateRecoveryCount(ctx context.Context, arg UpdateRecoveryCountParams) error {
	_, err := q.db.ExecContext(ctx, updateRecoveryCount, arg.Recovery, arg.Gdid, arg.GameType)
	return err
}

const upsertPuzzle = `-- name: UpsertPuzzle :exec
INSERT INTO gf11dm10_puzzle
(game_type, gdid, puzzle_no, flags, hidden)
VALUES (?1, ?2, ?3, ?4, ?5)
ON CONFLICT (gdid, puzzle_no) DO
UPDATE SET flags=?4, hidden=?5
`

type UpsertPuzzleParams struct {
	GameType int64
	Gdid     int64
	PuzzleNo int64
	Flags    int64
	Hidden   int64
}

func (q *Queries) UpsertPuzzle(ctx context.Context, arg UpsertPuzzleParams) error {
	_, err := q.db.ExecContext(ctx, upsertPuzzle,
		arg.GameType,
		arg.Gdid,
		arg.PuzzleNo,
		arg.Flags,
		arg.Hidden,
	)
	return err
}
