// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: score.sql

package db

import (
	"context"
)

const getAllMaxSkillPointsByGdid = `-- name: GetAllMaxSkillPointsByGdid :many
SELECT netid, seq_mode, CAST(MAX(skill) AS INTEGER) AS ` + "`" + `skill` + "`" + `, perc
FROM gf11dm10_scores
WHERE gdid = ?
AND game_type = ?
AND netid != -1
GROUP BY gdid, netid
`

type GetAllMaxSkillPointsByGdidParams struct {
	Gdid     int64
	GameType int64
}

type GetAllMaxSkillPointsByGdidRow struct {
	Netid   int64
	SeqMode int64
	Skill   int64
	Perc    int64
}

func (q *Queries) GetAllMaxSkillPointsByGdid(ctx context.Context, arg GetAllMaxSkillPointsByGdidParams) ([]GetAllMaxSkillPointsByGdidRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMaxSkillPointsByGdid, arg.Gdid, arg.GameType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMaxSkillPointsByGdidRow
	for rows.Next() {
		var i GetAllMaxSkillPointsByGdidRow
		if err := rows.Scan(
			&i.Netid,
			&i.SeqMode,
			&i.Skill,
			&i.Perc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseBestRank = `-- name: GetCourseBestRank :one
WITH sorted_scores AS (
    SELECT gdid, score
    FROM gf11dm10_scores
    WHERE courseid = ?
    AND game_type = ?
    AND seq_mode = ?
    ORDER BY score DESC
), ranked_scores AS (
    SELECT gdid, ROW_NUMBER() OVER() AS ` + "`" + `rank` + "`" + `
    FROM sorted_scores
)
SELECT CAST(MIN(rank) AS INTEGER)
FROM ranked_scores
WHERE gdid = ?
`

type GetCourseBestRankParams struct {
	Courseid int64
	GameType int64
	SeqMode  int64
	Gdid     int64
}

func (q *Queries) GetCourseBestRank(ctx context.Context, arg GetCourseBestRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCourseBestRank,
		arg.Courseid,
		arg.GameType,
		arg.SeqMode,
		arg.Gdid,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getCourseCurrentRank = `-- name: GetCourseCurrentRank :one
SELECT COUNT(*) + 1
FROM gf11dm10_scores
WHERE courseid = ?
AND game_type = ?
AND seq_mode = ?
AND score > ?
`

type GetCourseCurrentRankParams struct {
	Courseid int64
	GameType int64
	SeqMode  int64
	Score    int64
}

func (q *Queries) GetCourseCurrentRank(ctx context.Context, arg GetCourseCurrentRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCourseCurrentRank,
		arg.Courseid,
		arg.GameType,
		arg.SeqMode,
		arg.Score,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getCourseTotalPlayCount = `-- name: GetCourseTotalPlayCount :one
SELECT COUNT(*)
FROM gf11dm10_scores
WHERE courseid = ?
AND seq_mode = ?
AND game_type = ?
`

type GetCourseTotalPlayCountParams struct {
	Courseid int64
	SeqMode  int64
	GameType int64
}

func (q *Queries) GetCourseTotalPlayCount(ctx context.Context, arg GetCourseTotalPlayCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCourseTotalPlayCount, arg.Courseid, arg.SeqMode, arg.GameType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFavorites = `-- name: GetFavorites :many
SELECT netid
FROM gf11dm10_scores
WHERE netid != -1
AND game_type = ?
GROUP BY netid
ORDER BY COUNT(netid) DESC
LIMIT ?
`

type GetFavoritesParams struct {
	GameType int64
	Limit    int64
}

func (q *Queries) GetFavorites(ctx context.Context, arg GetFavoritesParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFavorites, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var netid int64
		if err := rows.Scan(&netid); err != nil {
			return nil, err
		}
		items = append(items, netid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerCount = `-- name: GetPlayerCount :one
SELECT COUNT(*)
FROM gf11dm10_card_profile
WHERE game_type = ?
`

func (q *Queries) GetPlayerCount(ctx context.Context, gameType int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPlayerCount, gameType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPlayerRank = `-- name: GetPlayerRank :one
WITH sorted_skills AS (
    SELECT gdid, skill
    FROM gf11dm10_card_profile
    WHERE game_type = ?
    ORDER BY skill DESC
), ranked_skills AS (
    SELECT gdid, ROW_NUMBER() OVER() AS ` + "`" + `rank` + "`" + `
    FROM sorted_skills
)
SELECT CAST(rank AS INTEGER)
FROM ranked_skills
WHERE gdid = ?
`

type GetPlayerRankParams struct {
	GameType int64
	Gdid     int64
}

func (q *Queries) GetPlayerRank(ctx context.Context, arg GetPlayerRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPlayerRank, arg.GameType, arg.Gdid)
	var rank int64
	err := row.Scan(&rank)
	return rank, err
}

const getPlayerSkill = `-- name: GetPlayerSkill :one
SELECT skill
FROM gf11dm10_card_profile
WHERE gdid = ?
AND game_type = ?
`

type GetPlayerSkillParams struct {
	Gdid     int64
	GameType int64
}

func (q *Queries) GetPlayerSkill(ctx context.Context, arg GetPlayerSkillParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPlayerSkill, arg.Gdid, arg.GameType)
	var skill int64
	err := row.Scan(&skill)
	return skill, err
}

const getRankedShops = `-- name: GetRankedShops :many
SELECT pref, name, points
FROM gf11dm10_shops
WHERE game_type = ?
ORDER BY points DESC
LIMIT ?
`

type GetRankedShopsParams struct {
	GameType int64
	Limit    int64
}

type GetRankedShopsRow struct {
	Pref   int64
	Name   string
	Points int64
}

func (q *Queries) GetRankedShops(ctx context.Context, arg GetRankedShopsParams) ([]GetRankedShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRankedShops, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRankedShopsRow
	for rows.Next() {
		var i GetRankedShopsRow
		if err := rows.Scan(&i.Pref, &i.Name, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRankedShopsByPref = `-- name: GetRankedShopsByPref :many
SELECT name, points
FROM gf11dm10_shops
WHERE pref = ?
AND game_type = ?
ORDER BY points DESC
LIMIT ?
`

type GetRankedShopsByPrefParams struct {
	Pref     int64
	GameType int64
	Limit    int64
}

type GetRankedShopsByPrefRow struct {
	Name   string
	Points int64
}

func (q *Queries) GetRankedShopsByPref(ctx context.Context, arg GetRankedShopsByPrefParams) ([]GetRankedShopsByPrefRow, error) {
	rows, err := q.db.QueryContext(ctx, getRankedShopsByPref, arg.Pref, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRankedShopsByPrefRow
	for rows.Next() {
		var i GetRankedShopsByPrefRow
		if err := rows.Scan(&i.Name, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeqStatsByGdid = `-- name: GetSeqStatsByGdid :many
SELECT netid, seq_mode, CAST(MAX(skill) AS INTEGER) AS ` + "`" + `skill` + "`" + `, perc
FROM gf11dm10_scores
WHERE gdid = ?
AND game_type = ?
AND netid != -1
GROUP BY gdid, netid, seq_mode
`

type GetSeqStatsByGdidParams struct {
	Gdid     int64
	GameType int64
}

type GetSeqStatsByGdidRow struct {
	Netid   int64
	SeqMode int64
	Skill   int64
	Perc    int64
}

func (q *Queries) GetSeqStatsByGdid(ctx context.Context, arg GetSeqStatsByGdidParams) ([]GetSeqStatsByGdidRow, error) {
	rows, err := q.db.QueryContext(ctx, getSeqStatsByGdid, arg.Gdid, arg.GameType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSeqStatsByGdidRow
	for rows.Next() {
		var i GetSeqStatsByGdidRow
		if err := rows.Scan(
			&i.Netid,
			&i.SeqMode,
			&i.Skill,
			&i.Perc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShopBySerial = `-- name: GetShopBySerial :one
SELECT pref, name, points
FROM gf11dm10_shops
WHERE sid = ?
AND game_type = ?
`

type GetShopBySerialParams struct {
	Sid      string
	GameType int64
}

type GetShopBySerialRow struct {
	Pref   int64
	Name   string
	Points int64
}

func (q *Queries) GetShopBySerial(ctx context.Context, arg GetShopBySerialParams) (GetShopBySerialRow, error) {
	row := q.db.QueryRowContext(ctx, getShopBySerial, arg.Sid, arg.GameType)
	var i GetShopBySerialRow
	err := row.Scan(&i.Pref, &i.Name, &i.Points)
	return i, err
}

const getShopRank = `-- name: GetShopRank :one
SELECT COUNT(*) + 1
FROM gf11dm10_shops
WHERE points > (
    SELECT t.points
    FROM gf11dm10_shops AS t
    WHERE t.sid = ?
    AND t.game_type = ?
    LIMIT 1
)
`

type GetShopRankParams struct {
	Sid      string
	GameType int64
}

func (q *Queries) GetShopRank(ctx context.Context, arg GetShopRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getShopRank, arg.Sid, arg.GameType)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getShopRankByPref = `-- name: GetShopRankByPref :one
SELECT COUNT(*) + 1
FROM gf11dm10_shops
WHERE points > (
    SELECT t.points
    FROM gf11dm10_shops AS t
    WHERE t.sid = ?
    AND t.game_type = ?
    AND t.pref = ?
    LIMIT 1
)
`

type GetShopRankByPrefParams struct {
	Sid      string
	GameType int64
	Pref     int64
}

func (q *Queries) GetShopRankByPref(ctx context.Context, arg GetShopRankByPrefParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getShopRankByPref, arg.Sid, arg.GameType, arg.Pref)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getSongCurrentRank = `-- name: GetSongCurrentRank :one
SELECT COUNT(*) + 1
FROM gf11dm10_scores
WHERE netid = ?
AND game_type = ?
AND seq_mode = ?
AND skill > ?
`

type GetSongCurrentRankParams struct {
	Netid    int64
	GameType int64
	SeqMode  int64
	Skill    int64
}

func (q *Queries) GetSongCurrentRank(ctx context.Context, arg GetSongCurrentRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSongCurrentRank,
		arg.Netid,
		arg.GameType,
		arg.SeqMode,
		arg.Skill,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getSongTotalPlayCount = `-- name: GetSongTotalPlayCount :one
SELECT COUNT(*)
FROM gf11dm10_scores
WHERE netid = ?
AND game_type = ?
AND seq_mode = ?
`

type GetSongTotalPlayCountParams struct {
	Netid    int64
	GameType int64
	SeqMode  int64
}

func (q *Queries) GetSongTotalPlayCount(ctx context.Context, arg GetSongTotalPlayCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSongTotalPlayCount, arg.Netid, arg.GameType, arg.SeqMode)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isBestScore = `-- name: IsBestScore :one
SELECT CAST(CASE WHEN COUNT(*) > 0 THEN 0 ELSE 1 END AS INTEGER)
FROM gf11dm10_scores
WHERE gdid = ?
AND game_type = ?
AND netid = ?
AND seq_mode = ?
AND score >= ?
`

type IsBestScoreParams struct {
	Gdid     int64
	GameType int64
	Netid    int64
	SeqMode  int64
	Score    int64
}

func (q *Queries) IsBestScore(ctx context.Context, arg IsBestScoreParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isBestScore,
		arg.Gdid,
		arg.GameType,
		arg.Netid,
		arg.SeqMode,
		arg.Score,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const recalculateTotalSkillPointsForGdid = `-- name: RecalculateTotalSkillPointsForGdid :exec
UPDATE gf11dm10_card_profile
SET skill = (SELECT SUM(t.max_skill)
FROM (
    SELECT gs.netid, MAX(gs.skill) AS max_skill
    FROM gf11dm10_scores AS gs
    WHERE gs.gdid = ?1
    AND gs.game_type = ?2
    AND clear > 0
    GROUP BY gs.netid
    ORDER BY gs.skill DESC
    LIMIT 30
) as t)
WHERE gf11dm10_card_profile.gdid = ?1
`

type RecalculateTotalSkillPointsForGdidParams struct {
	Gdid     int64
	GameType int64
}

func (q *Queries) RecalculateTotalSkillPointsForGdid(ctx context.Context, arg RecalculateTotalSkillPointsForGdidParams) error {
	_, err := q.db.ExecContext(ctx, recalculateTotalSkillPointsForGdid, arg.Gdid, arg.GameType)
	return err
}

const saveScore = `-- name: SaveScore :exec
INSERT INTO gf11dm10_scores (game_type, gdid, netid, courseid, seq_mode, flags, score, clear, combo, skill, perc, irall, ircom)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type SaveScoreParams struct {
	GameType int64
	Gdid     int64
	Netid    int64
	Courseid int64
	SeqMode  int64
	Flags    int64
	Score    int64
	Clear    int64
	Combo    int64
	Skill    int64
	Perc     int64
	Irall    int64
	Ircom    int64
}

func (q *Queries) SaveScore(ctx context.Context, arg SaveScoreParams) error {
	_, err := q.db.ExecContext(ctx, saveScore,
		arg.GameType,
		arg.Gdid,
		arg.Netid,
		arg.Courseid,
		arg.SeqMode,
		arg.Flags,
		arg.Score,
		arg.Clear,
		arg.Combo,
		arg.Skill,
		arg.Perc,
		arg.Irall,
		arg.Ircom,
	)
	return err
}

const updateLandPoints = `-- name: UpdateLandPoints :exec
INSERT INTO gf11dm10_shops
(game_type, sid, pref, name, points)
VALUES (?1, ?2, ?3, ?4, ?5)
ON CONFLICT (game_type, sid) DO
UPDATE SET points=points + ?5
`

type UpdateLandPointsParams struct {
	GameType int64
	Sid      string
	Pref     int64
	Name     string
	Points   int64
}

func (q *Queries) UpdateLandPoints(ctx context.Context, arg UpdateLandPointsParams) error {
	_, err := q.db.ExecContext(ctx, updateLandPoints,
		arg.GameType,
		arg.Sid,
		arg.Pref,
		arg.Name,
		arg.Points,
	)
	return err
}

const updateShopPoints = `-- name: UpdateShopPoints :exec
INSERT INTO gf11dm10_shops
(game_type, sid, pref, name, points)
VALUES (?1, ?2, ?3, ?4, ?5)
ON CONFLICT (game_type, sid) DO
UPDATE SET points=points + ?5
`

type UpdateShopPointsParams struct {
	GameType int64
	Sid      string
	Pref     int64
	Name     string
	Points   int64
}

func (q *Queries) UpdateShopPoints(ctx context.Context, arg UpdateShopPointsParams) error {
	_, err := q.db.ExecContext(ctx, updateShopPoints,
		arg.GameType,
		arg.Sid,
		arg.Pref,
		arg.Name,
		arg.Points,
	)
	return err
}
