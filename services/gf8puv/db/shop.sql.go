// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shop.sql

package db

import (
	"context"
)

const addMachineToShop = `-- name: AddMachineToShop :exec
INSERT INTO gf8dm7puv_shop_machines
(game_type, pcbid, name, pref)
VALUES
(?1, ?2, ?3, ?4)
ON CONFLICT(game_type, pcbid) DO
UPDATE SET name = ?3, pref = ?4
`

type AddMachineToShopParams struct {
	GameType int64
	Pcbid    string
	Name     string
	Pref     int64
}

func (q *Queries) AddMachineToShop(ctx context.Context, arg AddMachineToShopParams) error {
	_, err := q.db.ExecContext(ctx, addMachineToShop,
		arg.GameType,
		arg.Pcbid,
		arg.Name,
		arg.Pref,
	)
	return err
}

const getRankedShops = `-- name: GetRankedShops :many
SELECT name, points, pref
FROM gf8dm7puv_shops
WHERE game_type = ?
ORDER BY points DESC
LIMIT ?
`

type GetRankedShopsParams struct {
	GameType int64
	Limit    int64
}

type GetRankedShopsRow struct {
	Name   string
	Points int64
	Pref   int64
}

func (q *Queries) GetRankedShops(ctx context.Context, arg GetRankedShopsParams) ([]GetRankedShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRankedShops, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRankedShopsRow
	for rows.Next() {
		var i GetRankedShopsRow
		if err := rows.Scan(&i.Name, &i.Points, &i.Pref); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRankedShopsByPref = `-- name: GetRankedShopsByPref :many
SELECT name, points
FROM gf8dm7puv_shops
WHERE pref = ?
AND game_type = ?
ORDER BY points DESC
LIMIT ?
`

type GetRankedShopsByPrefParams struct {
	Pref     int64
	GameType int64
	Limit    int64
}

type GetRankedShopsByPrefRow struct {
	Name   string
	Points int64
}

func (q *Queries) GetRankedShopsByPref(ctx context.Context, arg GetRankedShopsByPrefParams) ([]GetRankedShopsByPrefRow, error) {
	rows, err := q.db.QueryContext(ctx, getRankedShopsByPref, arg.Pref, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRankedShopsByPrefRow
	for rows.Next() {
		var i GetRankedShopsByPrefRow
		if err := rows.Scan(&i.Name, &i.Points); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShop = `-- name: GetShop :one
SELECT game_type, pref, name, points
FROM gf8dm7puv_shops
WHERE name = ?
AND game_type = ?
AND pref = ?
`

type GetShopParams struct {
	Name     string
	GameType int64
	Pref     int64
}

func (q *Queries) GetShop(ctx context.Context, arg GetShopParams) (Gf8dm7puvShop, error) {
	row := q.db.QueryRowContext(ctx, getShop, arg.Name, arg.GameType, arg.Pref)
	var i Gf8dm7puvShop
	err := row.Scan(
		&i.GameType,
		&i.Pref,
		&i.Name,
		&i.Points,
	)
	return i, err
}

const getShopByPcbid = `-- name: GetShopByPcbid :one
SELECT s.game_type, s.pref, s.name, s.points
FROM gf8dm7puv_shops AS s
INNER JOIN gf8dm7puv_shop_machines AS sm ON sm.pcbid = ?
WHERE s.name = sm.name
AND s.game_type = ?
AND s.pref = sm.pref
LIMIT 1
`

type GetShopByPcbidParams struct {
	Pcbid    string
	GameType int64
}

func (q *Queries) GetShopByPcbid(ctx context.Context, arg GetShopByPcbidParams) (Gf8dm7puvShop, error) {
	row := q.db.QueryRowContext(ctx, getShopByPcbid, arg.Pcbid, arg.GameType)
	var i Gf8dm7puvShop
	err := row.Scan(
		&i.GameType,
		&i.Pref,
		&i.Name,
		&i.Points,
	)
	return i, err
}

const getShopRank = `-- name: GetShopRank :one
WITH sorted_shops AS (
    SELECT game_type, pref, name, points
    FROM gf8dm7puv_shops
    ORDER BY points DESC
), ranked_shops AS (
    SELECT game_type, pref, name, points, ROW_NUMBER() OVER() AS ` + "`" + `rank` + "`" + `
    FROM sorted_shops
)
SELECT CAST(rank AS INTEGER)
FROM ranked_shops
WHERE name = ?
AND game_type = ?
AND pref = ?
`

type GetShopRankParams struct {
	Name     string
	GameType int64
	Pref     int64
}

func (q *Queries) GetShopRank(ctx context.Context, arg GetShopRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getShopRank, arg.Name, arg.GameType, arg.Pref)
	var rank int64
	err := row.Scan(&rank)
	return rank, err
}

const getShopRankByPref = `-- name: GetShopRankByPref :one
WITH sorted_shops AS (
    SELECT game_type, pref, name, points
    FROM gf8dm7puv_shops
    WHERE pref = ?
    ORDER BY points DESC
), ranked_shops AS (
    SELECT game_type, pref, name, points, ROW_NUMBER() OVER() AS ` + "`" + `rank` + "`" + `
    FROM sorted_shops
)
SELECT CAST(rank AS INTEGER)
FROM ranked_shops
WHERE name = ?
AND game_type = ?
`

type GetShopRankByPrefParams struct {
	Pref     int64
	Name     string
	GameType int64
}

func (q *Queries) GetShopRankByPref(ctx context.Context, arg GetShopRankByPrefParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getShopRankByPref, arg.Pref, arg.Name, arg.GameType)
	var rank int64
	err := row.Scan(&rank)
	return rank, err
}

const updateShopPoints = `-- name: UpdateShopPoints :exec
INSERT INTO gf8dm7puv_shops (game_type, pref, name, points)
VALUES (?1, ?2, ?3, ?4)
ON CONFLICT(game_type, pref, name) DO
UPDATE SET points = points + ?4
`

type UpdateShopPointsParams struct {
	GameType int64
	Pref     int64
	Name     string
	Points   int64
}

func (q *Queries) UpdateShopPoints(ctx context.Context, arg UpdateShopPointsParams) error {
	_, err := q.db.ExecContext(ctx, updateShopPoints,
		arg.GameType,
		arg.Pref,
		arg.Name,
		arg.Points,
	)
	return err
}
