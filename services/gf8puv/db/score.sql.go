// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: score.sql

package db

import (
	"context"
)

const addScore = `-- name: AddScore :exec
INSERT INTO gf8dm7puv_scores
(game_type, cardid, musicid, musicnum, seq, flags, encore, extra, score, clear, skill, combo)
VALUES
(?,?,?,?,?,?,?,?,?,?,?,?)
`

type AddScoreParams struct {
	GameType int64
	Cardid   string
	Musicid  int64
	Musicnum int64
	Seq      int64
	Flags    int64
	Encore   int64
	Extra    int64
	Score    int64
	Clear    int64
	Skill    int64
	Combo    int64
}

func (q *Queries) AddScore(ctx context.Context, arg AddScoreParams) error {
	_, err := q.db.ExecContext(ctx, addScore,
		arg.GameType,
		arg.Cardid,
		arg.Musicid,
		arg.Musicnum,
		arg.Seq,
		arg.Flags,
		arg.Encore,
		arg.Extra,
		arg.Score,
		arg.Clear,
		arg.Skill,
		arg.Combo,
	)
	return err
}

const getScoreRank = `-- name: GetScoreRank :one
SELECT COUNT(*) AS count
FROM gf8dm7puv_scores
WHERE musicid = ?
AND game_type = ?
AND seq = ?
AND score >= ?
`

type GetScoreRankParams struct {
	Musicid  int64
	GameType int64
	Seq      int64
	Score    int64
}

func (q *Queries) GetScoreRank(ctx context.Context, arg GetScoreRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getScoreRank,
		arg.Musicid,
		arg.GameType,
		arg.Seq,
		arg.Score,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSkillPointsByCardId = `-- name: GetSkillPointsByCardId :one
SELECT CAST(IFNULL(SUM(t.skill), 0) AS INTEGER) AS skill_points
FROM (
    SELECT skill
    FROM gf8dm7puv_scores
    WHERE cardid = ?
    AND game_type = ?
    ORDER BY score DESC
    LIMIT 30
) AS t
`

type GetSkillPointsByCardIdParams struct {
	Cardid   string
	GameType int64
}

func (q *Queries) GetSkillPointsByCardId(ctx context.Context, arg GetSkillPointsByCardIdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSkillPointsByCardId, arg.Cardid, arg.GameType)
	var skill_points int64
	err := row.Scan(&skill_points)
	return skill_points, err
}

const getSkillScoresByCardId = `-- name: GetSkillScoresByCardId :many
SELECT musicid
FROM gf8dm7puv_scores
WHERE cardid = ?
AND game_type = ?
ORDER BY score DESC
LIMIT ?
`

type GetSkillScoresByCardIdParams struct {
	Cardid   string
	GameType int64
	Limit    int64
}

func (q *Queries) GetSkillScoresByCardId(ctx context.Context, arg GetSkillScoresByCardIdParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getSkillScoresByCardId, arg.Cardid, arg.GameType, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var musicid int64
		if err := rows.Scan(&musicid); err != nil {
			return nil, err
		}
		items = append(items, musicid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalPlayedCount = `-- name: GetTotalPlayedCount :one
SELECT COUNT(*) AS count
FROM gf8dm7puv_scores
WHERE musicid = ?
AND game_type = ?
AND seq = ?
GROUP BY musicid
`

type GetTotalPlayedCountParams struct {
	Musicid  int64
	GameType int64
	Seq      int64
}

func (q *Queries) GetTotalPlayedCount(ctx context.Context, arg GetTotalPlayedCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalPlayedCount, arg.Musicid, arg.GameType, arg.Seq)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isBestScore = `-- name: IsBestScore :one
SELECT CAST(CASE WHEN COUNT(*) > 0 THEN 0 ELSE 1 END AS INTEGER)
FROM gf8dm7puv_scores
WHERE cardid = ?
AND game_type = ?
AND musicid = ?
AND seq = ?
AND score >= ?
`

type IsBestScoreParams struct {
	Cardid   string
	GameType int64
	Musicid  int64
	Seq      int64
	Score    int64
}

func (q *Queries) IsBestScore(ctx context.Context, arg IsBestScoreParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isBestScore,
		arg.Cardid,
		arg.GameType,
		arg.Musicid,
		arg.Seq,
		arg.Score,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
